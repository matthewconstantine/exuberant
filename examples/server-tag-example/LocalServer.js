import React from 'react'
import PropTypes from 'prop-types'
import { spawn } from 'child_process'

const propTypes = {
  port: 'string',
  children: PropTypes.node.isRequired,
}

const defaultProps = {
  port: 8080,
}

// processPromise
// Wraps node's `spawn` in a promise making it easier to chain
const processPromise = (command, args = [], { cwd, logData, logError }) =>
  new Promise((resolve, reject) => {
    const proc = spawn(command, args, { cwd })
    logData(`Starting \`${command} ${args.join(' ')}\``)
    proc.on('error', error => {
      logError(`Failed to start subprocess. Error: ${error}`)
      reject(error)
    })
    proc.stdout.on('data', logData)
    proc.stderr.on('data', logError)
    proc.on('close', code => {
      if (!code) {
        logData('Successfuly Exited')
        resolve(code)
      } else {
        logError(`Process Failed with exit code: ${code}`)
        reject(code)
      }
    })
  })

// Make Logger
// Creates a logger with a prefix
// This could be way more advanced, or use Winston perhaps
const makeLogger = prefix => data =>
  console.log(`\n_| ${prefix} |_____________________________________\n${data}`)

// Install
// Uses processPromise to create run `npm install` on the project generated
// by exuberant
const install = outputPath =>
  processPromise('npm', ['install'], {
    cwd: outputPath,
    logData: makeLogger('Install Process'),
    logError: data => console.log(`${data}`),
  })

// Start
// Uses processPromise to start the webpack dev server for the project
// generated by exuberant. It accepts a customizable port.
const start = (outputPath, port) =>
  processPromise('npm', ['start', '--', `--port`, `${port}`], {
    cwd: outputPath,
    logData: makeLogger('Server Process'),
    logError: data => console.log(`${data}`),
  })

// Chain the install and start promisses together
const installThenStart = port => outputPath => {
  install(outputPath).then(() => {
    start(outputPath, port)
  })
}

// And this is it... we pass installThenStart to the project tag
// When exuberant generates the app, it runs the commands and starts
// the server automatically.
const LocalServer = ({ port, children }) => (
  <project didRender={installThenStart(port)}>{children}</project>
)

LocalServer.propTypes = propTypes

LocalServer.defaultProps = defaultProps

export default LocalServer
